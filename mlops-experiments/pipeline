pipeline {
    agent any

    environment {
        BASE_TAG = "mlops"
        REGION = "eu-north-1"
        AMI_ID = "ami-042b4708b1d05f512"
        SUBNET_ID = "subnet-0fbbd665a7645d096"
        LAUNCH_TEMPLATE_ID = "lt-03b3e1cee6265e795"
        KEY_NAME = "mlops-proj"
        ec2_USER = "ubuntu"
    }

    stages {
        stage('Generate Unique Tag') {
            steps {
                script {
                    env.RANDOM_SUFFIX = UUID.randomUUID().toString().take(8)
                    env.INSTANCE_TAG = "${BASE_TAG}-${RANDOM_SUFFIX}"
                    env.SG_NAME = "${BASE_TAG}-sg-${RANDOM_SUFFIX}"
                    echo "üîñ Generated tag: ${INSTANCE_TAG}"
                }
            }
        }

        stage('Cleanup Old EC2s & SGs') {
            steps {
                withAWS(region: "${REGION}", credentials: 'aws-jenkins-creds') {
                    script {
                        def old_instances = sh(
                            script: """
                                aws ec2 describe-instances \
                                --region ${REGION} \
                                --filters "Name=tag:Name,Values=${BASE_TAG}-*" "Name=instance-state-name,Values=running" \
                                --query "Reservations[].Instances[].InstanceId" \
                                --output text
                            """,
                            returnStdout: true
                        ).trim()
                        if (old_instances) {
                            echo "üóëÔ∏è Terminating old EC2s: ${old_instances}"
                            sh "aws ec2 terminate-instances --region ${REGION} --instance-ids ${old_instances}"
                            sh "aws ec2 wait instance-terminated --region ${REGION} --instance-ids ${old_instances}"
                        } else {
                            echo "‚úÖ No old instances found."
                        }

                        def old_sgs = sh(
                            script: """
                                aws ec2 describe-security-groups \
                                --region ${REGION} \
                                --query "SecurityGroups[?starts_with(GroupName, '${BASE_TAG}-sg-')].GroupId" \
                                --output text
                            """,
                            returnStdout: true
                        ).trim()
                        if (old_sgs) {
                            for (sg_id in old_sgs.tokenize()) {
                                echo "üõ°Ô∏è Deleting SG: ${sg_id}"
                                sh "aws ec2 delete-security-group --region ${REGION} --group-id ${sg_id} || true"
                            }
                        } else {
                            echo "‚úÖ No old SGs found."
                        }
                    }
                }
            }
        }

        stage('Create Security Group') {
            steps {
                withAWS(region: "${REGION}", credentials: 'aws-jenkins-creds') {
                    script {
                        env.VPC_ID = sh(
                            script: """
                                aws ec2 describe-subnets --region ${REGION} --subnet-ids ${SUBNET_ID} \
                                --query "Subnets[0].VpcId" --output text
                            """, returnStdout: true
                        ).trim()

                        env.SECURITY_GROUP_ID = sh(
                            script: """
                                aws ec2 create-security-group \
                                --region ${REGION} \
                                --group-name ${SG_NAME} \
                                --description "MLOps SG for ${INSTANCE_TAG}" \
                                --vpc-id ${VPC_ID} \
                                --query 'GroupId' \
                                --output text
                            """, returnStdout: true
                        ).trim()

                        echo "‚úÖ SG created: ${SECURITY_GROUP_ID}"

                        sh """
                            aws ec2 authorize-security-group-ingress --region ${REGION} --group-id ${SECURITY_GROUP_ID} \
                            --ip-permissions '[
                                {"IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]},
                                {"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]},
                                {"IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]},
                                {"IpProtocol": "tcp", "FromPort": 8888, "ToPort": 8888, "IpRanges": [{"CidrIp": "0.0.0.0/0"}]}
                            ]'
                        """
                    }
                }
            }
        }

        stage('Launch EC2 Instance') {
            steps {
                withAWS(region: "${REGION}", credentials: 'aws-jenkins-creds') {
                    script {
                        echo "üöÄ Launching EC2 instance..."
                        env.INSTANCE_ID = sh(
                            script: """
                                aws ec2 run-instances \
                                --region ${REGION} \
                                --image-id "${AMI_ID}" \
                                --instance-type "t3.large" \
                                --instance-initiated-shutdown-behavior "stop" \
                                --key-name "${KEY_NAME}" \
                                --block-device-mappings '[{
                                    "DeviceName": "/dev/sda1",
                                    "Ebs": {
                                        "DeleteOnTermination": true,
                                        "VolumeSize": 30,
                                        "VolumeType": "gp3"
                                    }
                                }]' \
                                --network-interfaces '[{
                                    "SubnetId": "${SUBNET_ID}",
                                    "DeleteOnTermination": true,
                                    "AssociatePublicIpAddress": true,
                                    "DeviceIndex": 0,
                                    "Groups": ["${SECURITY_GROUP_ID}"]
                                }]' \
                                --launch-template '{"LaunchTemplateId":"${LAUNCH_TEMPLATE_ID}","Version":"1"}' \
                                --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=${INSTANCE_TAG}}]' \
                                --count 1 \
                                --query "Instances[0].InstanceId" \
                                --output text
                            """,
                            returnStdout: true
                        ).trim()

                        echo "‚úÖ Launched instance: ${INSTANCE_ID}"

                        echo "‚è≥ Waiting for instance to be running..."
                        sh "aws ec2 wait instance-running --region ${REGION} --instance-ids ${INSTANCE_ID}"

                        env.INSTANCE_IP = sh(
                            script: """
                                aws ec2 describe-instances \
                                --region ${REGION} \
                                --instance-ids ${INSTANCE_ID} \
                                --query "Reservations[0].Instances[0].PublicIpAddress" \
                                --output text
                            """,
                            returnStdout: true
                        ).trim()

                        echo "üåê Instance public IP: ${INSTANCE_IP}"
                    }
                }
            }
        }

        stage('SSH and Create Directory') {
            steps {
                withCredentials([file(credentialsId: 'mlops-ssh-key', variable: 'PEM_PATH')]) {
                    script {
                        echo "üîê Connecting via SSH..."
                        sh """
                            chmod 400 ${PEM_PATH}
                            ssh -o StrictHostKeyChecking=no -i ${PEM_PATH} ${ec2_USER}@${INSTANCE_IP} '
                                echo "üìÅ Creating directory /tmp/mlops-demo-${RANDOM_SUFFIX}"
                                mkdir -p /tmp/mlops-demo-${RANDOM_SUFFIX}
                                ls -la /tmp/mlops-demo-${RANDOM_SUFFIX}
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "‚úîÔ∏è Pipeline finished. Instance: ${INSTANCE_ID} | SG: ${SECURITY_GROUP_ID}"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs above."
        }
    }
}
